TestCase subclass: #AlgoRemisTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoRemisTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 02:37'!test03ViajeDeChoferDeAutoElectricoHaciaFIUBAOfreceElMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAutoElectrico: 'Tomas' conTarifaInicial: 200.	algoRemis crearViajeConDestino: 'Av Paseo Colon 850' aKms: 15 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Av Paseo Colon 850'.	valorEsperado := 200 "tarifa inicial" + (15 "km" * 30 "precio/km") + (1 "peajes" * 50 "tarifa peaje").	self assert: 'Tomas' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 02:37'!test06ViajeAHospitalRecibeUnDescuentoAdicional	| algoRemis viaje valorEsperadoConHospital |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Pablo' conTarifaInicial: 450.	algoRemis registrarChoferDeAuto: 'Santi' conTarifaInicial: 350.	algoRemis crearViajeConDestino: 'Hospital Tres Arcos' aKms: 10 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Hospital Tres Arcos'.		valorEsperadoConHospital := 0.2 * (350 "tarifa inicial" + (10 "km" * 50 "precio/km") + (1 "peajes" * 100 "tarifa peaje")).	self assert: 'Santi' equals: (viaje chofer).	self assert: valorEsperadoConHospital closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 02:36'!test01ViajeDeChoferDeAutoOfreceElPrecioMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 500.	algoRemis crearViajeConDestino: 'Parque La Costa' aKms: 2 peajes: 0.	viaje := algoRemis viajeMasBaratoParaDestino: 'Parque La Costa'.	valorEsperado := 500 "tarifa inicial" + (2 "km" * 50 "precio/km")+ (0 "peajes" * 100 "tarifa peaje").	self assert: 'Diego' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 02:36'!test02AlgoRemisConDosChoferesRegistradosConDistintaTarifaInicialEligeElMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 500.	algoRemis registrarChoferDeAuto: 'Pablo' conTarifaInicial: 450.	algoRemis crearViajeConDestino: 'Av Paseo Colon 850' aKms: 15 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Av Paseo Colon 850'.	valorEsperado := 450 "tarifa inicial" + (15 "km" * 50 "precio/km") + (1 "peajes" * 100 "tarifa peaje").	self assert: 'Pablo' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 02:37'!test05ViajeACiudadUniversitariaConAutoElectricoSaleMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Nico' conTarifaInicial: 250.	algoRemis registrarChoferDeAutoElectrico: 'Seba' conTarifaInicial: 400.	algoRemis crearViajeConDestino: 'Ciudad Universitaria' aKms: 25 peajes: 2.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Ciudad Universitaria'.	valorEsperado := 400 "tarifa inicial" + (25 "km" * 30 "precio/km") + (2 "peajes" * 50 "tarifa peaje").	self assert: 'Seba' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 02:37'!test04AlgoRemisConDosChoferesRegistradosConDistintaTarifaInicialEligeElMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAutoElectrico: 'Tomas' conTarifaInicial: 200.	algoRemis registrarChoferDeAutoElectrico: 'Seba' conTarifaInicial: 400.	algoRemis crearViajeConDestino: 'Segurola y Habana 4310, septimo piso' aKms: 15 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Segurola y Habana 4310, septimo piso'.	valorEsperado := 200 "tarifa inicial" + (15 "km" * 30 "precio/km") + (1 "peajes" * 50 "tarifa peaje").	self assert: 'Tomas' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'running'!setUp	precision := 0.001! !TestCase subclass: #CantidadKilometrosErrorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!CantidadKilometrosErrorTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 01:10'!test03CrearUnViajeConUnaCantidadDeKilometrosMayorACeroNoLanzaExcepcion	| algoRemis |	algoRemis := AlgoRemis new.	self shouldnt: [ algoRemis crearViajeConDestino: 'Neverland' aKms: 10  peajes: 0 ] raise: CantidadDeKilometrosError.! !!CantidadKilometrosErrorTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 01:08'!test01CrearUnViajeConUnaCantidadDeKilometrosIgualACeroLanzaExcepcion	| algoRemis |	algoRemis := AlgoRemis new.	self should: [ algoRemis crearViajeConDestino: 'Neverland' aKms: 0  peajes: 0 ] raise: CantidadDeKilometrosError.! !!CantidadKilometrosErrorTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 01:09'!test02CrearUnViajeConUnaCantidadDeKilometrosMenorACeroLanzaExcepcion	| algoRemis |	algoRemis := AlgoRemis new.	self should: [ algoRemis crearViajeConDestino: 'Neverland' aKms: -10  peajes: 0 ] raise: CantidadDeKilometrosError.! !TestCase subclass: #CantidadPeajesErrorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!CantidadPeajesErrorTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 01:22'!test01CrearUnViajeConUnaCantidadDePeajesMenorACeroLanzaExcepcion	| algoRemis |	algoRemis := AlgoRemis new.	self should: [ algoRemis crearViajeConDestino: 'Neverland' aKms: 10  peajes: -1 ] raise: CantidadDePeajesError.! !TestCase subclass: #DestinoInexistenteErrorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!DestinoInexistenteErrorTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 02:25'!test02ViajeMasBaratoADestinoExistenteNoLanzaExcepcion	| algoRemis |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 500.	algoRemis crearViajeConDestino: 'Parque La Costa' aKms: 2 peajes: 0.	self shouldnt: [ algoRemis viajeMasBaratoParaDestino: 'Parque La Costa' ] raise: DestinoInexistenteError.	! !!DestinoInexistenteErrorTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 02:23'!test01ViajeMasBaratoADestinoInexistenteLanzaExcepcion	| algoRemis |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 500.	algoRemis crearViajeConDestino: 'Parque La Costa' aKms: 2 peajes: 0.	self should: [ algoRemis viajeMasBaratoParaDestino: 'Estadio Jos√© Amalfitani' ] raise: DestinoInexistenteError.	! !TestCase subclass: #TarifaInicialErrorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!TarifaInicialErrorTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 01:26'!test01RegistrarUnChoferDeAutoConTarifaInicialMenorACeroLanzaExcepcion	| algoRemis |	algoRemis := AlgoRemis new.	self should: [ algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: -1 ] raise: TarifaInicialError. ! !!TarifaInicialErrorTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 01:35'!test04RegistrarUnChoferDeAutoElectricoConTarifaInicialPositivaNoLanzaExcepcion	| algoRemis |	algoRemis := AlgoRemis new.	self shouldnt: [ algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 1000 ] raise: TarifaInicialError. ! !!TarifaInicialErrorTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 01:35'!test03RegistrarUnChoferDeAutoConTarifaInicialPositivaNoLanzaExcepcion	| algoRemis |	algoRemis := AlgoRemis new.	self shouldnt: [ algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 1000 ] raise: TarifaInicialError. ! !!TarifaInicialErrorTest methodsFor: 'tests' stamp: 'MartinSchipani 10/13/2021 01:33'!test02RegistrarUnChoferDeAutoElectricoConTarifaInicialMenorACeroLanzaExcepcion	| algoRemis |	algoRemis := AlgoRemis new.	self should: [ algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: -1 ] raise: TarifaInicialError. ! !